    prev_acts = [10, 11, 12, 13, 14]

    def get_action(self, state):
        # random moves: tradeoff exploration / exploitation
        self.epsilon = 80 - self.n_games
        final_move = [0,0,0]
        if random.randint(0, 200) < self.epsilon:
            moves = [0, 1, 2]
            if not all(element == self.prev_acts[0] for element in self.prev_acts):
                move = random.randint(0, 2)
                final_move[move] = 1
                self.prev_acts.insert(0, move)
                self.prev_acts.pop()
            else:
                move = random.choice(moves.pop(self.prev_acts[0]))
                final_move[move] = 1
                self.prev_acts.insert(0, move)
                self.prev_acts.pop()
        else:
            state0 = torch.tensor(state, dtype=torch.float)
            prediction = self.model(state0)
            move = torch.argmax(prediction).item()
            final_move[move] = 1
    
        return final_move
